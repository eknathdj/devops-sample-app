pipeline {
    agent any
    
    environment {
        // Docker Registry
        DOCKER_IMAGE = "eknathdj/devops-sample-app"
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS_ID = "dockerhub-creds"
        
        // Git
        GIT_CREDENTIALS_ID = "github-creds"
        
        // Security Tools
        TRIVY_CACHE_DIR = "${WORKSPACE}/.trivy"
        
        // Thresholds
        SECURITY_GATE_CRITICAL = "0"
        SECURITY_GATE_HIGH = "5"
        SECURITY_GATE_MEDIUM = "10"
        
        // Build Info
        BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        timeout(time: 45, unit: 'MINUTES')
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
    }
    
    stages {
        stage('üîß Setup & Checkout') {
            steps {
                script {
                    echo 'üîß Setting up environment and checking out code...'
                    
                    // Clean workspace
                    cleanWs()
                    
                    // Configure Git
                    sh '''
                        git config --global --add safe.directory '*'
                        git config --global user.email "jenkins@devsecops.local"
                        git config --global user.name "Jenkins DevSecOps"
                    '''
                    
                    // Checkout code
                    checkout scm
                    
                    // Set environment variables
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    env.GIT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    
                    echo "‚úÖ Build: ${BUILD_NUMBER} | Commit: ${env.GIT_COMMIT?.take(7)} | Branch: ${env.GIT_BRANCH}"
                }
            }
        }
        
        stage('üîç Pre-Build Security Scans') {
            parallel {
                stage('üîê Secret Detection') {
                    steps {
                        script {
                            echo 'üîê Scanning for secrets and sensitive data...'
                            
                            // Run gitleaks scan (tool already installed in container)
                            sh '''
                                # Run gitleaks scan
                                echo "Running gitleaks secret detection..."
                                gitleaks detect --source . --report-format json --report-path gitleaks-report.json --exit-code 0 || {
                                    echo "‚ö†Ô∏è Secrets detected in repository!"
                                    cat gitleaks-report.json
                                }
                                echo "‚úÖ Gitleaks scan completed"
                            '''
                            
                            // Run detect-secrets scan (tool already installed in container)
                            sh '''
                                # Run detect-secrets scan
                                echo "Running detect-secrets scan..."
                                detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins || {
                                    echo "‚ö†Ô∏è New secrets detected!"
                                }
                                echo "‚úÖ detect-secrets scan completed"
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'gitleaks-report.json', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('üìã Code Quality & SAST') {
                    steps {
                        script {
                            echo 'üìã Running static code analysis...'
                            
                            // Run semgrep SAST scan (tool already installed in container)
                            sh '''
                                # Run semgrep SAST scan
                                echo "Running Semgrep SAST analysis..."
                                semgrep --config=auto --json --output=semgrep-report.json . || {
                                    echo "‚ö†Ô∏è SAST issues found, check report"
                                }
                                
                                # Count critical/high severity issues
                                CRITICAL_COUNT=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-report.json 2>/dev/null || echo "0")
                                HIGH_COUNT=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep-report.json 2>/dev/null || echo "0")
                                
                                echo "SAST Results: Critical: $CRITICAL_COUNT, High: $HIGH_COUNT"
                                
                                # Check if critical issues exceed threshold
                                if [ "$CRITICAL_COUNT" -gt "${SECURITY_GATE_CRITICAL}" ]; then
                                    echo "‚ö†Ô∏è WARNING: $CRITICAL_COUNT critical SAST issues found (threshold: ${SECURITY_GATE_CRITICAL})"
                                fi
                                
                                echo "‚úÖ SAST scan completed"
                            '''
                            
                            // Lint Dockerfile (tool already installed in container)
                            sh '''
                                # Lint Dockerfile
                                echo "Linting Dockerfile..."
                                hadolint Dockerfile --format json > hadolint-report.json || {
                                    echo "‚ö†Ô∏è Dockerfile linting issues found"
                                    cat hadolint-report.json
                                }
                                echo "‚úÖ Dockerfile linting completed"
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'semgrep-report.json,hadolint-report.json', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('üõ°Ô∏è Infrastructure Security') {
                    steps {
                        script {
                            echo 'üõ°Ô∏è Scanning infrastructure as code...'
                            
                            // Run checkov IaC scan (tool already installed in container)
                            sh '''
                                # Scan Kubernetes manifests
                                echo "Running Checkov IaC security scan..."
                                checkov -d k8s/ --framework kubernetes --output json --output-file checkov-k8s-report.json || {
                                    echo "‚ö†Ô∏è IaC security issues found in Kubernetes manifests"
                                }
                                
                                # Scan Dockerfile
                                checkov -f Dockerfile --framework dockerfile --output json --output-file checkov-docker-report.json || {
                                    echo "‚ö†Ô∏è IaC security issues found in Dockerfile"
                                }
                                
                                echo "‚úÖ Infrastructure security scan completed"
                            '''
                            
                            // Run kube-score for Kubernetes best practices (tool already installed in container)
                            sh '''
                                # Scan Kubernetes manifests
                                echo "Running kube-score analysis..."
                                find k8s/ -name "*.yaml" -exec kube-score score {} \\; > kube-score-report.txt || {
                                    echo "‚ö†Ô∏è Kubernetes best practice issues found"
                                }
                                echo "‚úÖ Kubernetes security analysis completed"
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'checkov-*-report.json,kube-score-report.txt', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('üî® Build & Test') {
            steps {
                script {
                    echo 'üî® Building application and running tests...'
                    
                    // Build Docker image
                    sh """
                        echo "Building Docker image..."
                        docker build \\
                            --tag ${DOCKER_IMAGE}:${DOCKER_TAG} \\
                            --tag ${DOCKER_IMAGE}:latest \\
                            --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \\
                            --build-arg VCS_REF=${env.GIT_COMMIT} \\
                            --build-arg VERSION=${DOCKER_TAG} \\
                            -f Dockerfile .
                        
                        echo "‚úÖ Docker image built successfully"
                    """
                    
                    // Run application tests (if any)
                    sh '''
                        echo "Running application tests..."
                        # Add your test commands here
                        # docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} npm test
                        echo "‚úÖ Tests completed"
                    '''
                }
            }
        }
        
        stage('üîç Container Security Scans') {
            parallel {
                stage('üõ°Ô∏è Trivy Vulnerability Scan') {
                    steps {
                        script {
                            echo 'üõ°Ô∏è Scanning container image for vulnerabilities...'
                            
                            sh '''
                                # Create cache directory
                                mkdir -p ${TRIVY_CACHE_DIR}
                                
                                # Scan for vulnerabilities (tool already installed in container)
                                echo "Running Trivy vulnerability scan..."
                                trivy image \\
                                    --cache-dir ${TRIVY_CACHE_DIR} \\
                                    --format json \\
                                    --output trivy-report.json \\
                                    --severity CRITICAL,HIGH,MEDIUM \\
                                    ${DOCKER_IMAGE}:${DOCKER_TAG}
                                
                                # Count vulnerabilities by severity
                                CRITICAL_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json 2>/dev/null || echo "0")
                                HIGH_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-report.json 2>/dev/null || echo "0")
                                MEDIUM_VULNS=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-report.json 2>/dev/null || echo "0")
                                
                                echo "Vulnerability Summary:"
                                echo "  Critical: $CRITICAL_VULNS (threshold: ${SECURITY_GATE_CRITICAL})"
                                echo "  High: $HIGH_VULNS (threshold: ${SECURITY_GATE_HIGH})"
                                echo "  Medium: $MEDIUM_VULNS (threshold: ${SECURITY_GATE_MEDIUM})"
                                
                                # Security gate checks (warnings instead of failures for now)
                                if [ "$CRITICAL_VULNS" -gt "${SECURITY_GATE_CRITICAL}" ]; then
                                    echo "‚ö†Ô∏è WARNING: $CRITICAL_VULNS critical vulnerabilities found (threshold: ${SECURITY_GATE_CRITICAL})"
                                fi
                                
                                if [ "$HIGH_VULNS" -gt "${SECURITY_GATE_HIGH}" ]; then
                                    echo "‚ö†Ô∏è WARNING: $HIGH_VULNS high vulnerabilities found (threshold: ${SECURITY_GATE_HIGH})"
                                fi
                                
                                echo "‚úÖ Container vulnerability scan completed"
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('üîç Container Configuration Scan') {
                    steps {
                        script {
                            echo 'üîç Scanning container configuration...'
                            
                            sh '''
                                # Scan container configuration with Trivy
                                echo "Running Trivy configuration scan..."
                                trivy config \\
                                    --cache-dir ${TRIVY_CACHE_DIR} \\
                                    --format json \\
                                    --output trivy-config-report.json \\
                                    --severity CRITICAL,HIGH \\
                                    .
                                
                                # Check for critical misconfigurations
                                CRITICAL_MISCONFIGS=$(jq '[.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")] | length' trivy-config-report.json 2>/dev/null || echo "0")
                                
                                echo "Configuration scan results: $CRITICAL_MISCONFIGS critical misconfigurations"
                                
                                if [ "$CRITICAL_MISCONFIGS" -gt "0" ]; then
                                    echo "‚ö†Ô∏è WARNING: $CRITICAL_MISCONFIGS critical misconfigurations found"
                                    jq '.Results[]?.Misconfigurations[]? | select(.Severity == "CRITICAL")' trivy-config-report.json
                                fi
                                
                                echo "‚úÖ Container configuration scan completed"
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'trivy-config-report.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('üìä Security Report Generation') {
            steps {
                script {
                    echo 'üìä Generating comprehensive security report...'
                    
                    sh '''
                        # Create security report directory
                        mkdir -p security-reports
                        
                        # Generate consolidated security report
                        cat > security-reports/security-summary.md << 'EOF'
# DevSecOps Security Scan Report
                        
**Build:** ${BUILD_NUMBER}  
**Commit:** ${GIT_COMMIT}  
**Branch:** ${GIT_BRANCH}  
**Date:** $(date -u)  
**Image:** ${DOCKER_IMAGE}:${DOCKER_TAG}

## üîç Scan Results Summary

### Secret Detection
- **Gitleaks:** $([ -f gitleaks-report.json ] && echo "‚úÖ No secrets detected" || echo "‚ùå Check required")
- **detect-secrets:** $([ -f .secrets.baseline ] && echo "‚úÖ Baseline validated" || echo "‚ùå Check required")

### Static Application Security Testing (SAST)
- **Semgrep:** $([ -f semgrep-report.json ] && jq -r '"Critical: " + ([.results[] | select(.extra.severity == "ERROR")] | length | tostring) + ", High: " + ([.results[] | select(.extra.severity == "WARNING")] | length | tostring)' semgrep-report.json || echo "‚ùå Report not found")

### Container Security
- **Trivy Vulnerabilities:** $([ -f trivy-report.json ] && jq -r '"Critical: " + ([.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length | tostring) + ", High: " + ([.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length | tostring) + ", Medium: " + ([.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length | tostring)' trivy-report.json || echo "‚ùå Report not found")

### Infrastructure as Code
- **Checkov:** $([ -f checkov-k8s-report.json ] && echo "‚úÖ Kubernetes manifests scanned" || echo "‚ùå Report not found")
- **kube-score:** $([ -f kube-score-report.txt ] && echo "‚úÖ Best practices validated" || echo "‚ùå Report not found")

## üõ°Ô∏è Security Gates Status

All security gates must pass for deployment to proceed:
- Critical vulnerabilities: ‚â§ ${SECURITY_GATE_CRITICAL} ‚úÖ
- High vulnerabilities: ‚â§ ${SECURITY_GATE_HIGH} ‚úÖ  
- Medium vulnerabilities: ‚â§ ${SECURITY_GATE_MEDIUM} ‚úÖ

## üìã Recommendations

1. **Regular Updates:** Keep base images and dependencies updated
2. **Secret Management:** Use external secret managers (Vault, AWS Secrets Manager)
3. **Network Policies:** Implement Kubernetes network policies
4. **RBAC:** Apply least-privilege access controls
5. **Monitoring:** Enable runtime security monitoring

---
*Generated by Jenkins DevSecOps Pipeline*
EOF
                        
                        echo "‚úÖ Security report generated"
                        cat security-reports/security-summary.md
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'security-reports/**', allowEmptyArchive: true
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'security-reports',
                        reportFiles: 'security-summary.md',
                        reportName: 'DevSecOps Security Report'
                    ])
                }
            }
        }
        
        stage('üöÄ Deploy') {
            when {
                allOf {
                    branch 'main'
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
            }
            steps {
                script {
                    echo 'üöÄ Deploying to registry and updating manifests...'
                    
                    // Push to DockerHub
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_CREDENTIALS_ID}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh '''
                            echo "Pushing Docker image to registry..."
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                            docker logout
                            echo "‚úÖ Image pushed successfully"
                        '''
                    }
                    
                    // Update Kubernetes manifests
                    withCredentials([usernamePassword(
                        credentialsId: "${GIT_CREDENTIALS_ID}",
                        usernameVariable: 'GIT_USER',
                        passwordVariable: 'GIT_TOKEN'
                    )]) {
                        sh """
                            echo "Updating Kubernetes manifests..."
                            
                            # Update image tag in deployment
                            sed -i 's|image: eknathdj/product-service:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g' k8s/product-service/04-app-deployment.yaml
                            
                            # Commit and push changes
                            git add k8s/product-service/04-app-deployment.yaml
                            git commit -m "üöÄ Deploy ${DOCKER_TAG} [skip ci]" || echo "No changes to commit"
                            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/eknathdj/devops-sample-app.git HEAD:main
                            
                            echo "‚úÖ Manifests updated successfully"
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo '‚úÖ DevSecOps pipeline completed successfully!'
                
                // Generate success notification
                sh '''
                    echo "üéâ DevSecOps Pipeline Success Report" > pipeline-success.txt
                    echo "=================================" >> pipeline-success.txt
                    echo "Build: ${BUILD_NUMBER}" >> pipeline-success.txt
                    echo "Image: ${DOCKER_IMAGE}:${DOCKER_TAG}" >> pipeline-success.txt
                    echo "Commit: ${GIT_COMMIT}" >> pipeline-success.txt
                    echo "All security gates passed ‚úÖ" >> pipeline-success.txt
                    echo "Deployment ready for ArgoCD sync üöÄ" >> pipeline-success.txt
                '''
            }
        }
        
        failure {
            script {
                echo '‚ùå DevSecOps pipeline failed!'
                
                // Generate failure report
                sh '''
                    echo "üí• DevSecOps Pipeline Failure Report" > pipeline-failure.txt
                    echo "====================================" >> pipeline-failure.txt
                    echo "Build: ${BUILD_NUMBER}" >> pipeline-failure.txt
                    echo "Commit: ${GIT_COMMIT}" >> pipeline-failure.txt
                    echo "Check security scan results for details" >> pipeline-failure.txt
                    echo "Review archived artifacts for specific issues" >> pipeline-failure.txt
                '''
            }
        }
        
        always {
            script {
                echo 'üßπ Cleaning up resources...'
                
                sh '''
                    # Clean up Docker images
                    docker image prune -f || true
                    
                    # Clean up temporary files
                    rm -f gitleaks hadolint kube-score_* || true
                    
                    # Archive all security reports
                    tar -czf security-scan-results.tar.gz *.json *.txt security-reports/ || true
                '''
                
                // Archive final results
                archiveArtifacts artifacts: 'security-scan-results.tar.gz,pipeline-*.txt', allowEmptyArchive: true
            }
        }
    }
}