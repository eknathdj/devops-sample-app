---
# Example: How to create encrypted SealedSecret values using kubeseal
# This is a template file showing the process

# 1. First, create a regular secret with your actual values:
# kubectl create secret generic postgres-secret --dry-run=client --from-literal=POSTGRES_USER=myuser --from-literal=POSTGRES_PASSWORD=mypassword --from-literal=POSTGRES_DB=mydb --from-literal=DATABASE_URL=postgres://myuser:mypassword@localhost:5432/mydb -o yaml > temp-secret.yaml

# 2. Then encrypt it using kubeseal (note: controller service name might be different):
# kubeseal --controller-name=sealed-secrets --controller-namespace=kube-system --format yaml < temp-secret.yaml > postgres-sealed-secret.yaml
# If the above fails, check the actual service name with: kubectl get svc -n kube-system

# 3. The encrypted values will look like this example (this is NOT encrypted, just showing format):
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: postgres-secret
  namespace: product-service
spec:
  encryptedData:
    POSTGRES_USER: AgBy3i4OJSWJBgUVKR2mEzYEktEbsh2T3dBQC5+bu4jxfOZhGmRo...
    POSTGRES_PASSWORD: AgBy3i4OJSWJBgUVKR2mEzYEktEbsh2T3dBQC5+bu4jxfOZhGmRo...
    POSTGRES_DB: AgBy3i4OJSWJBgUVKR2mEzYEktEbsh2T3dBQC5+bu4jxfOZhGmRo...
    DATABASE_URL: AgBy3i4OJSWJBgUVKR2mEzYEktEbsh2T3dBQC5+bu4jxfOZhGmRo...

---
# To fetch the certificate for offline encryption:
# kubeseal --controller-name=sealed-secrets --controller-namespace=kube-system --fetch-cert > sealed-secrets-cert.pem
# If the above fails, use the actual service name: kubectl get svc -n kube-system

# Then use it offline:
# kubeseal --cert sealed-secrets-cert.pem --format yaml < temp-secret.yaml > postgres-sealed-secret.yaml

---
# Note: Replace the <encrypted-KEY> placeholders in 01-secrets.yaml with actual encrypted values
# The SealedSecrets controller will automatically create the corresponding v1/Secret resources