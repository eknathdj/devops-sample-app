---
# Service Account for Product Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: product-service-sa
  namespace: product-service
  labels:
    app: product-service
  annotations:
    description: "Service account for product-service application pods"
---
# ResourceQuota for Product Service Account
apiVersion: v1
kind: ResourceQuota
metadata:
  name: product-service-sa-quota
  namespace: product-service
  annotations:
    description: "Resource limits for product-service service account"
spec:
  hard:
    pods: "10"
    requests.cpu: "2"
    requests.memory: 4Gi
    limits.cpu: "4"
    limits.memory: 8Gi
  scopes:
  - NotTerminating
---
# Role for Product Service (Least Privilege)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: product-service-role
  namespace: product-service
  annotations:
    description: "Minimal permissions for product-service application"
rules:
# Allow reading specific configmaps and secrets
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["product-service-config"]
  verbs: ["get", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["postgres-secret", "app-secret"]
  verbs: ["get", "watch"]
# Allow reading services for service discovery
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
# Allow limited pod access for health checks and metrics
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
  # Optional: restrict to own pods only
  # resourceNames: [] # Would need to be populated with actual pod names
---
# RoleBinding for Product Service
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: product-service-rolebinding
  namespace: product-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: product-service-role
subjects:
- kind: ServiceAccount
  name: product-service-sa
  namespace: product-service
---
# Role for ArgoCD to manage product-service namespace (Reduced permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-product-service-manager
  namespace: product-service
  annotations:
    description: "ArgoCD permissions for managing product-service components"
rules:
# Core Kubernetes resources
- apiGroups: [""]
  resources: ["configmaps", "secrets", "services", "serviceaccounts", "endpoints"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/exec", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Apps resources
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Batch resources
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Networking
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Monitoring
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "prometheusrules", "podmonitors"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Autoscaling
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Policy
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# RBAC (read-only for ArgoCD)
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "watch"]
# Sealed Secrets
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# RoleBinding for ArgoCD
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-product-service-manager-binding
  namespace: product-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-product-service-manager
subjects:
- kind: ServiceAccount
  name: argocd-application-controller
  namespace: argocd
---
# Role for Jenkins to deploy (Least Privilege)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins-deployer
  namespace: product-service
  annotations:
    description: "Jenkins CI/CD permissions for deployment operations"
rules:
# Apps resources (limited to deployment operations)
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "rollback"]
# Core resources (limited scope)
- apiGroups: [""]
  resources: ["pods", "pods/log", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["product-service-config"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Batch resources (for jobs and cronjobs)
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Networking (limited to ingress)
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Monitoring (read-only)
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors", "prometheusrules"]
  verbs: ["get", "list", "watch"]
# Autoscaling
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# ResourceQuota for Jenkins Service Account
apiVersion: v1
kind: ResourceQuota
metadata:
  name: jenkins-deployer-quota
  namespace: product-service
  annotations:
    description: "Resource limits for Jenkins CI/CD operations"
spec:
  hard:
    pods: "5"
    requests.cpu: "1"
    requests.memory: 2Gi
    limits.cpu: "2"
    limits.memory: 4Gi
  scopes:
  - NotTerminating
---
# RoleBinding for Jenkins
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-deployer-binding
  namespace: product-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins-deployer
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins  # Adjust based on your Jenkins namespace