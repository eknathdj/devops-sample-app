---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: product-service-metrics
  namespace: product-service
  labels:
    app: product-service
    release: prometheus
spec:
  jobLabel: app
  selector:
    matchLabels:
      app: product-service
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
# PrometheusRule for Alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: product-service-alerts
  namespace: product-service
  labels:
    app: product-service
    prometheus: kube-prometheus
spec:
  groups:
  - name: product-service
    interval: 30s
    rules:
    # High error rate alert
    - alert: HighErrorRate
      expr: |
        (
          sum(rate(http_requests_total{job="product-service", status=~"5.."}[5m]))
          /
          sum(rate(http_requests_total{job="product-service"}[5m]))
        ) > 0.05
      for: 5m
      labels:
        severity: critical
        service: product-service
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value | humanizePercentage }} for product-service"
    
    # High response time alert
    - alert: HighResponseTime
      expr: |
        histogram_quantile(0.95, 
          sum(rate(http_request_duration_seconds_bucket{job="product-service"}[5m])) by (le)
        ) > 1
      for: 5m
      labels:
        severity: warning
        service: product-service
      annotations:
        summary: "High response time detected"
        description: "95th percentile response time is {{ $value }}s for product-service"
    
    # Pod down alert
    - alert: PodDown
      expr: |
        kube_deployment_status_replicas_available{deployment="product-service"} < 2
      for: 5m
      labels:
        severity: critical
        service: product-service
      annotations:
        summary: "Product service has insufficient replicas"
        description: "Only {{ $value }} replicas are available for product-service"
    
    # Database connection issues
    - alert: DatabaseConnectionFailure
      expr: |
        ceil(rate(db_connection_errors_total{service="product-service"}[5m])) > 1
      for: 5m
      labels:
        severity: critical
        service: product-service
      annotations:
        summary: "Database connection failures detected"
        description: "Product service is experiencing database connection issues"
    
    # High memory usage
    - alert: HighMemoryUsage
      expr: |
        (
          container_memory_working_set_bytes{namespace="product-service", pod=~"product-service-.*"}
          /
          container_spec_memory_limit_bytes{namespace="product-service", pod=~"product-service-.*"}
        ) > 0.9
      for: 5m
      labels:
        severity: warning
        service: product-service
      annotations:
        summary: "High memory usage detected"
        description: "Memory usage is {{ $value | humanizePercentage }} for {{ $labels.pod }}"
    
    # High CPU usage
    - alert: HighCPUUsage
      expr: |
        100 * (
          sum(rate(container_cpu_usage_seconds_total{namespace="product-service", pod=~"product-service-.*", container!=""}[5m])) by (namespace,pod)
          /
          sum(kube_pod_container_resource_limits_cpu_cores{namespace="product-service", pod=~"product-service-.*"}) by (namespace,pod)
        ) > 80
      for: 5m
      labels:
        severity: warning
        service: product-service
      annotations:
        summary: "High CPU usage detected"
        description: "CPU usage is {{ $value | humanizePercentage }} for {{ $labels.pod }}"

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-dashboard
  namespace: product-service
  labels:
    grafana_dashboard: "1"
data:
  product-service-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "uid": "product-service-dashboard",
        "title": "Product Service Monitoring",
        "tags": ["product-service", "kubernetes"],
        "timezone": "browser",
        "schemaVersion": 30,
        "version": 1,
        "refresh": "30s",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "datasource": "${DS_PROMETHEUS}",
            "targets": [
              {
                "refId": "A",
                "expr": "sum(rate(http_requests_total{job=\"product-service\"}[5m])) by (status)",
                "legendFormat": "{{status}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Response Time (p95)",
            "type": "graph",
            "datasource": "${DS_PROMETHEUS}",
            "targets": [
              {
                "refId": "A",
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=\"product-service\"}[5m])) by (le))",
                "legendFormat": "p95"
              }
            ]
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "datasource": "${DS_PROMETHEUS}",
            "targets": [
              {
                "refId": "A",
                "expr": "sum(rate(http_requests_total{job=\"product-service\", status=~\"5..\"}[5m]))",
                "legendFormat": "errors"
              }
            ]
          },
          {
            "id": 4,
            "title": "Pod Status",
            "type": "stat",
            "datasource": "${DS_PROMETHEUS}",
            "targets": [
              {
                "refId": "A",
                "expr": "kube_deployment_status_replicas_available{deployment=\"product-service\"}",
                "legendFormat": "available"
              }
            ]
          }
        ]
      }
    }

---
# Network Policy for monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus
  namespace: product-service
spec:
  podSelector:
    matchLabels:
      app: product-service
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # metrics port